# -*- coding: utf-8 -*-
"""train_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mbR1Z5iVErKhkggscfOQErA-8qWJ-_lj
"""

import json
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler

with open('/content/Dataset.json', 'r') as f:
    data = json.load(f)

"""## All the point which are use"""

records = []
for bus in data:
    for point in bus['data']:
        records.append({
            'bus_id': bus['bus_id'],
            'timestamp': point['timestamp'],
            'latitude': point['latitude'],
            'longitude': point['longitude'],
            'speed': point['speed'],
            'heading': point['heading']
        })

df = pd.DataFrame(records)

"""## Feature Eng"""

df['timestamp'] = pd.to_datetime(df['timestamp'])
df = df.sort_values(['bus_id', 'timestamp'])

df = df.fillna(method='ffill').fillna(method='bfill')
scaler = MinMaxScaler()

df[['latitude', 'longitude', 'speed', 'heading']] = scaler.fit_transform(df[['latitude', 'longitude', 'speed', 'heading']])

"""## Sequence for LSTM"""

sequence_length = 3

def create_sequences(df, seq_length):
    sequences = []
    targets = []
    bus_ids = df['bus_id'].unique()
    for bus_id in bus_ids:
        bus_data = df[df['bus_id'] == bus_id].reset_index(drop=True)
        features = bus_data[['latitude', 'longitude', 'speed', 'heading']].values
        for i in range(len(features) - seq_length):
            seq = features[i:i+seq_length]
            target = features[i+seq_length][:2]  # predict latitude and longitude only
            sequences.append(seq)
            targets.append(target)
    return np.array(sequences), np.array(targets)

X, y = create_sequences(df, sequence_length)
print(f"Input shape: {X.shape}")
print(f"Target shape: {y.shape}")

import joblib

# After fitting the scaler on training data
joblib.dump(scaler, 'scaler.save')

"""# MODEL Training"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

num_features = X.shape[2]

model = Sequential([
    LSTM(64, activation='tanh', input_shape=(sequence_length, num_features), return_sequences=False),
    Dense(32, activation='relu'),
    Dense(2)
])

model.compile(optimizer='adam', loss='mse')
# Train the model
history = model.fit(X, y, epochs=50, batch_size=16, validation_split=0.2)
# Save the model
model.save('bus_location_predictor.h5')